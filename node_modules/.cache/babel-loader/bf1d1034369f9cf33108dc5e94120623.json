{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fredysaulteherantovar/Documents/projects/BOOSTERTRON/megatron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/fredysaulteherantovar/Documents/projects/BOOSTERTRON/megatron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/fredysaulteherantovar/Documents/projects/BOOSTERTRON/megatron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/fredysaulteherantovar/Documents/projects/BOOSTERTRON/megatron/src/index.js\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nvar waitForGlobal = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var tronWeb, nodes, connected;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!window.tronWeb) {\n              _context3.next = 9;\n              break;\n            }\n\n            tronWeb = window.tronWeb;\n            _context3.next = 4;\n            return tronWeb.isConnected();\n\n          case 4:\n            nodes = _context3.sent;\n            connected = !Object.entries(nodes).map(function (_ref2) {\n              var _ref3 = _slicedToArray(_ref2, 2),\n                  name = _ref3[0],\n                  connected = _ref3[1];\n\n              if (!connected) {//  alert(\"Please install TronLink Wallet\")\n              }\n\n              return connected;\n            }).includes(false);\n\n            if (connected) {\n              ReactDOM.render( /*#__PURE__*/React.createElement(App, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 17,\n                  columnNumber: 29\n                }\n              }), document.getElementById('root'));\n            } else {\n              //  console.error(`Error: TRON node is not connected`);\n              // alert(\"Please install TronLink Wallet\");\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return waitForGlobal();\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })), 1);\n            }\n\n            _context3.next = 10;\n            break;\n\n          case 9:\n            // alert(\"Please install TronLink Wallet\");\n            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return waitForGlobal();\n\n                    case 2:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            })), 1);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function waitForGlobal() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nwaitForGlobal().then();","map":{"version":3,"sources":["/Users/fredysaulteherantovar/Documents/projects/BOOSTERTRON/megatron/src/index.js"],"names":["React","ReactDOM","App","waitForGlobal","window","tronWeb","isConnected","nodes","connected","Object","entries","map","name","includes","render","document","getElementById","setTimeout","then"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,IAAIC,aAAa;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACZC,MAAM,CAACC,OADK;AAAA;AAAA;AAAA;;AAERA,YAAAA,OAFQ,GAEED,MAAM,CAACC,OAFT;AAAA;AAAA,mBAGQA,OAAO,CAACC,WAAR,EAHR;;AAAA;AAGNC,YAAAA,KAHM;AAINC,YAAAA,SAJM,GAIM,CAACC,MAAM,CAACC,OAAP,CAAeH,KAAf,EAAsBI,GAAtB,CAA0B,iBAAuB;AAAA;AAAA,kBAArBC,IAAqB;AAAA,kBAAfJ,SAAe;;AAChE,kBAAI,CAACA,SAAL,EAAgB,CACd;AACD;;AACD,qBAAOA,SAAP;AACH,aALkB,EAKhBK,QALgB,CAKP,KALO,CAJP;;AAWZ,gBAAIL,SAAJ,EAAc;AACVP,cAAAA,QAAQ,CAACa,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACH,aAFD,MAEO;AACL;AACC;AACCC,cAAAA,UAAU,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACDd,aAAa,EADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD,IAEP,CAFO,CAAV;AAGH;;AAnBW;AAAA;;AAAA;AAsBb;AACCc,YAAAA,UAAU,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACDd,aAAa,EADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,IAEP,CAFO,CAAV;;AAvBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbA,aAAa;AAAA;AAAA;AAAA,GAAjB;;AA6BAA,aAAa,GAAGe,IAAhB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nvar waitForGlobal = async () =>{\n    if (window.tronWeb) {\n        let tronWeb = window.tronWeb;\n        const nodes = await tronWeb.isConnected();\n        const connected = !Object.entries(nodes).map(([name, connected]) => {\n            if (!connected) {\n              //  alert(\"Please install TronLink Wallet\")\n            }\n            return connected;\n        }).includes(false);\n  \n        if (connected){\n            ReactDOM.render(<App />, document.getElementById('root'));\n        } else {\n          //  console.error(`Error: TRON node is not connected`);\n           // alert(\"Please install TronLink Wallet\");\n            setTimeout(async () => {\n                await waitForGlobal();\n            }, 1);\n        }\n\n    } else {\n       // alert(\"Please install TronLink Wallet\");\n        setTimeout(async () => {\n            await waitForGlobal();\n        }, 1);\n    }\n};\n\nwaitForGlobal().then();\n\n"]},"metadata":{},"sourceType":"module"}